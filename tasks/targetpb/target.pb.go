// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: target.proto

package targetpb

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_Unknown  Status = 0
	Status_Active   Status = 1
	Status_Inactive Status = 2
)

var Status_name = map[int32]string{
	0: "Unknown",
	1: "Active",
	2: "Inactive",
}

var Status_value = map[string]int32{
	"Unknown":  0,
	"Active":   1,
	"Inactive": 2,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_468528a86129e532, []int{0}
}

type Targetgroup struct {
	Targets []string          `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	Labels  map[string]string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Targetgroup) Reset()         { *m = Targetgroup{} }
func (m *Targetgroup) String() string { return proto.CompactTextString(m) }
func (*Targetgroup) ProtoMessage()    {}
func (*Targetgroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_468528a86129e532, []int{0}
}
func (m *Targetgroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Targetgroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Targetgroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Targetgroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Targetgroup.Merge(m, src)
}
func (m *Targetgroup) XXX_Size() int {
	return m.Size()
}
func (m *Targetgroup) XXX_DiscardUnknown() {
	xxx_messageInfo_Targetgroup.DiscardUnknown(m)
}

var xxx_messageInfo_Targetgroup proto.InternalMessageInfo

func (m *Targetgroup) GetTargets() []string {
	if m != nil {
		return m.Targets
	}
	return nil
}

func (m *Targetgroup) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

type MeshEntry struct {
	Name        string       `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Status      Status       `protobuf:"varint,2,opt,name=status,proto3,enum=targetpb.Status" json:"status,omitempty"`
	Updated     time.Time    `protobuf:"bytes,3,opt,name=updated,proto3,stdtime" json:"updated"`
	Targetgroup *Targetgroup `protobuf:"bytes,4,opt,name=targetgroup,proto3" json:"targetgroup,omitempty"`
}

func (m *MeshEntry) Reset()         { *m = MeshEntry{} }
func (m *MeshEntry) String() string { return proto.CompactTextString(m) }
func (*MeshEntry) ProtoMessage()    {}
func (*MeshEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_468528a86129e532, []int{1}
}
func (m *MeshEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MeshEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MeshEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MeshEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MeshEntry.Merge(m, src)
}
func (m *MeshEntry) XXX_Size() int {
	return m.Size()
}
func (m *MeshEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_MeshEntry.DiscardUnknown(m)
}

var xxx_messageInfo_MeshEntry proto.InternalMessageInfo

func (m *MeshEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MeshEntry) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_Unknown
}

func (m *MeshEntry) GetUpdated() time.Time {
	if m != nil {
		return m.Updated
	}
	return time.Time{}
}

func (m *MeshEntry) GetTargetgroup() *Targetgroup {
	if m != nil {
		return m.Targetgroup
	}
	return nil
}

func init() {
	proto.RegisterEnum("targetpb.Status", Status_name, Status_value)
	proto.RegisterType((*Targetgroup)(nil), "targetpb.Targetgroup")
	proto.RegisterMapType((map[string]string)(nil), "targetpb.Targetgroup.LabelsEntry")
	proto.RegisterType((*MeshEntry)(nil), "targetpb.MeshEntry")
}

func init() { proto.RegisterFile("target.proto", fileDescriptor_468528a86129e532) }

var fileDescriptor_468528a86129e532 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xb1, 0x8e, 0xda, 0x40,
	0x14, 0xf4, 0xda, 0xc4, 0xc0, 0x33, 0x8a, 0xac, 0x55, 0x22, 0xad, 0x5c, 0x18, 0x87, 0xca, 0x8a,
	0x94, 0xb5, 0x44, 0x8a, 0x84, 0x14, 0x91, 0x82, 0x94, 0x22, 0x52, 0xd2, 0x38, 0xe4, 0x03, 0xd6,
	0xb0, 0x31, 0x08, 0xdb, 0x6b, 0xd9, 0x6b, 0x22, 0xfe, 0x82, 0x1f, 0xc8, 0xcf, 0x5c, 0x45, 0x49,
	0x79, 0xd5, 0xdd, 0x09, 0x7e, 0xe4, 0xc4, 0x2e, 0x16, 0x14, 0xd7, 0xbd, 0x19, 0xcf, 0x8c, 0x67,
	0x07, 0x06, 0x92, 0x55, 0x29, 0x97, 0xb4, 0xac, 0x84, 0x14, 0xb8, 0xa7, 0x51, 0x99, 0x78, 0xc3,
	0x54, 0x88, 0x34, 0xe3, 0x91, 0xe2, 0x93, 0xe6, 0x6f, 0x24, 0x57, 0x39, 0xaf, 0x25, 0xcb, 0x4b,
	0x2d, 0xf5, 0x3e, 0xa4, 0x2b, 0xb9, 0x6c, 0x12, 0x3a, 0x17, 0x79, 0x94, 0x8a, 0x54, 0x5c, 0x95,
	0x67, 0xa4, 0x80, 0xba, 0xb4, 0x7c, 0xf4, 0x1f, 0x81, 0x33, 0x53, 0xe1, 0x69, 0x25, 0x9a, 0x12,
	0x13, 0xe8, 0xea, 0x7f, 0xd5, 0x04, 0x05, 0x56, 0xd8, 0x8f, 0x5b, 0x88, 0x27, 0x60, 0x67, 0x2c,
	0xe1, 0x59, 0x4d, 0xcc, 0xc0, 0x0a, 0x9d, 0xf1, 0x3b, 0xda, 0x96, 0xa2, 0x37, 0x01, 0xf4, 0xa7,
	0xd2, 0x7c, 0x2f, 0x64, 0xb5, 0x8d, 0x2f, 0x06, 0x6f, 0x02, 0xce, 0x0d, 0x8d, 0x5d, 0xb0, 0xd6,
	0x7c, 0x4b, 0x50, 0x80, 0xc2, 0x7e, 0x7c, 0x3e, 0xf1, 0x1b, 0x78, 0xb5, 0x61, 0x59, 0xc3, 0x89,
	0xa9, 0x38, 0x0d, 0xbe, 0x98, 0x9f, 0xd1, 0xe8, 0x0e, 0x41, 0xff, 0x17, 0xaf, 0x97, 0xda, 0x89,
	0xa1, 0x53, 0xb0, 0x9c, 0x5f, 0xac, 0xea, 0xc6, 0x21, 0xd8, 0xb5, 0x64, 0xb2, 0xa9, 0x95, 0xf9,
	0xf5, 0xd8, 0xbd, 0xf6, 0xfa, 0xad, 0xf8, 0xf8, 0xf2, 0x1d, 0x7f, 0x85, 0x6e, 0x53, 0x2e, 0x98,
	0xe4, 0x0b, 0x62, 0x05, 0x28, 0x74, 0xc6, 0x1e, 0xd5, 0x6b, 0xd2, 0x76, 0x23, 0x3a, 0x6b, 0xd7,
	0x9c, 0xf6, 0xf6, 0x0f, 0x43, 0x63, 0xf7, 0x38, 0x44, 0x71, 0x6b, 0xc2, 0x9f, 0xc0, 0x91, 0xd7,
	0x97, 0x92, 0x8e, 0xca, 0x78, 0xfb, 0xe2, 0x0c, 0xf1, 0xad, 0xf2, 0x7d, 0x04, 0xb6, 0xae, 0x82,
	0x1d, 0xe8, 0xfe, 0x29, 0xd6, 0x85, 0xf8, 0x57, 0xb8, 0x06, 0x06, 0xb0, 0xbf, 0xcd, 0xe5, 0x6a,
	0xc3, 0x5d, 0x84, 0x07, 0xd0, 0xfb, 0x51, 0x30, 0x8d, 0xcc, 0x29, 0xd9, 0x1f, 0x7d, 0x74, 0x38,
	0xfa, 0xe8, 0xe9, 0xe8, 0xa3, 0xdd, 0xc9, 0x37, 0x0e, 0x27, 0xdf, 0xb8, 0x3f, 0xf9, 0x46, 0x62,
	0xab, 0xaa, 0x1f, 0x9f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x89, 0x75, 0xd4, 0x20, 0x02, 0x00,
	0x00,
}

func (m *Targetgroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Targetgroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Targetgroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTarget(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTarget(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTarget(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Targets) > 0 {
		for iNdEx := len(m.Targets) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Targets[iNdEx])
			copy(dAtA[i:], m.Targets[iNdEx])
			i = encodeVarintTarget(dAtA, i, uint64(len(m.Targets[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MeshEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MeshEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MeshEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Targetgroup != nil {
		{
			size, err := m.Targetgroup.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTarget(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Updated, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintTarget(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x1a
	if m.Status != 0 {
		i = encodeVarintTarget(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTarget(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTarget(dAtA []byte, offset int, v uint64) int {
	offset -= sovTarget(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Targetgroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Targets) > 0 {
		for _, s := range m.Targets {
			l = len(s)
			n += 1 + l + sovTarget(uint64(l))
		}
	}
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTarget(uint64(len(k))) + 1 + len(v) + sovTarget(uint64(len(v)))
			n += mapEntrySize + 1 + sovTarget(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *MeshEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTarget(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTarget(uint64(m.Status))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Updated)
	n += 1 + l + sovTarget(uint64(l))
	if m.Targetgroup != nil {
		l = m.Targetgroup.Size()
		n += 1 + l + sovTarget(uint64(l))
	}
	return n
}

func sovTarget(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTarget(x uint64) (n int) {
	return sovTarget(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Targetgroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Targetgroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Targetgroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Targets = append(m.Targets, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTarget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTarget
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTarget
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTarget
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTarget
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTarget
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTarget
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTarget
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTarget(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTarget
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTarget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MeshEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTarget
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MeshEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MeshEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTarget
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= Status(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Updated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTarget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Updated, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Targetgroup", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTarget
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTarget
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Targetgroup == nil {
				m.Targetgroup = &Targetgroup{}
			}
			if err := m.Targetgroup.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTarget(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTarget
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTarget
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTarget(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTarget
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTarget
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTarget
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTarget
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTarget
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTarget        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTarget          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTarget = fmt.Errorf("proto: unexpected end of group")
)
